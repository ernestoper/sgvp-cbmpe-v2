{
  "version": 3,
  "sources": ["../../home/ernesto/Downloads/cbmpe-risk-analyzer-main/sgvp-cbmpe-v2/netlify/functions/processes-backup.js"],
  "sourceRoot": "/tmp/tmp-27752-b8d7y2tvm3Ei",
  "sourcesContent": ["// Netlify Function - API para DynamoDB\nimport { DynamoDBClient } from '@aws-sdk/client-dynamodb';\nimport { \n  DynamoDBDocumentClient, \n  PutCommand, \n  GetCommand, \n  ScanCommand, \n  DeleteCommand,\n  QueryCommand \n} from '@aws-sdk/lib-dynamodb';\n\n// Configurar cliente DynamoDB\nconsole.log('\uD83D\uDD27 Configurando DynamoDB...');\nconsole.log('Region:', process.env.MY_AWS_REGION || process.env.AWS_REGION || 'us-east-1');\nconsole.log('Access Key exists:', !!process.env.MY_AWS_ACCESS_KEY_ID || !!process.env.AWS_ACCESS_KEY_ID);\n\nconst client = new DynamoDBClient({\n  region: process.env.MY_AWS_REGION || process.env.AWS_REGION || 'us-east-1',\n  credentials: {\n    accessKeyId: process.env.MY_AWS_ACCESS_KEY_ID || process.env.AWS_ACCESS_KEY_ID,\n    secretAccessKey: process.env.MY_AWS_SECRET_ACCESS_KEY || process.env.AWS_SECRET_ACCESS_KEY,\n  },\n});\n\nconst docClient = DynamoDBDocumentClient.from(client);\nconst TABLE_NAME = 'analyses';\n\n// Headers CORS\nconst headers = {\n  'Access-Control-Allow-Origin': '*',\n  'Access-Control-Allow-Headers': 'Content-Type',\n  'Access-Control-Allow-Methods': 'GET, POST, DELETE, OPTIONS',\n  'Content-Type': 'application/json',\n};\n\nexport const handler = async (event) => {\n  console.log('\uD83D\uDD25 Function called:', event.httpMethod, event.path);\n  \n  // Handle CORS preflight\n  if (event.httpMethod === 'OPTIONS') {\n    return { statusCode: 200, headers, body: '' };\n  }\n\n  try {\n    // Limpar o path - pode vir como /api/analyses ou /.netlify/functions/analyses\n    let path = event.path\n      .replace('/.netlify/functions/analyses', '')\n      .replace('/api/analyses', '');\n    const method = event.httpMethod;\n    \n    console.log('\uD83D\uDCCD Original path:', event.path);\n    console.log('\uD83D\uDCCD Cleaned path:', path, 'Method:', method);\n\n    // GET /api/analyses - Listar todas\n    if (method === 'GET' && path === '') {\n      const command = new ScanCommand({\n        TableName: TABLE_NAME,\n      });\n      \n      const result = await docClient.send(command);\n      \n      return {\n        statusCode: 200,\n        headers,\n        body: JSON.stringify(result.Items || []),\n      };\n    }\n\n    // GET /api/analyses/stats - Estat\u00EDsticas\n    if (method === 'GET' && path === '/stats') {\n      const command = new ScanCommand({\n        TableName: TABLE_NAME,\n      });\n      \n      const result = await docClient.send(command);\n      const analyses = result.Items || [];\n      \n      const stats = {\n        total: analyses.length,\n        aprovados: analyses.filter(a => a.status === 'aprovado').length,\n        pendentes: analyses.filter(a => a.status === 'pendente').length,\n        reprovados: analyses.filter(a => a.status === 'reprovado').length,\n        porRisco: {\n          baixo: analyses.filter(a => a.analise?.riskLevel === 'low').length,\n          medio: analyses.filter(a => a.analise?.riskLevel === 'medium').length,\n          alto: analyses.filter(a => a.analise?.riskLevel === 'high').length,\n        },\n        porTipo: {\n          DDLCB: analyses.filter(a => a.certificado?.tipo === 'DDLCB').length,\n          AR: analyses.filter(a => a.certificado?.tipo === 'AR').length,\n          AVCB: analyses.filter(a => a.certificado?.tipo === 'AVCB').length,\n        },\n      };\n      \n      return {\n        statusCode: 200,\n        headers,\n        body: JSON.stringify(stats),\n      };\n    }\n\n    // GET /api/analyses/:id - Buscar por ID\n    if (method === 'GET' && path.startsWith('/')) {\n      const id = path.substring(1);\n      \n      const command = new GetCommand({\n        TableName: TABLE_NAME,\n        Key: { id },\n      });\n      \n      const result = await docClient.send(command);\n      \n      if (!result.Item) {\n        return {\n          statusCode: 404,\n          headers,\n          body: JSON.stringify({ error: 'An\u00E1lise n\u00E3o encontrada' }),\n        };\n      }\n      \n      return {\n        statusCode: 200,\n        headers,\n        body: JSON.stringify(result.Item),\n      };\n    }\n\n    // POST /api/analyses - Criar nova an\u00E1lise\n    if (method === 'POST') {\n      console.log('\uD83D\uDCBE Salvando an\u00E1lise...');\n      const data = JSON.parse(event.body);\n      \n      // Gerar ID se n\u00E3o existir\n      if (!data.id) {\n        data.id = `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n      }\n      \n      // Adicionar timestamp\n      data.createdAt = new Date().toISOString();\n      \n      console.log('\uD83D\uDCDD Dados:', { id: data.id, cnpj: data.cnpj });\n      \n      const command = new PutCommand({\n        TableName: TABLE_NAME,\n        Item: data,\n      });\n      \n      console.log('\uD83D\uDE80 Enviando para DynamoDB...');\n      await docClient.send(command);\n      console.log('\u2705 Salvo com sucesso!');\n      \n      return {\n        statusCode: 201,\n        headers,\n        body: JSON.stringify({ \n          id: data.id, \n          message: 'An\u00E1lise criada com sucesso' \n        }),\n      };\n    }\n\n    // DELETE /api/analyses/:id - Deletar an\u00E1lise\n    if (method === 'DELETE' && path.startsWith('/')) {\n      const id = path.substring(1);\n      \n      const command = new DeleteCommand({\n        TableName: TABLE_NAME,\n        Key: { id },\n      });\n      \n      await docClient.send(command);\n      \n      return {\n        statusCode: 200,\n        headers,\n        body: JSON.stringify({ message: 'An\u00E1lise deletada com sucesso' }),\n      };\n    }\n\n    // Rota n\u00E3o encontrada\n    return {\n      statusCode: 404,\n      headers,\n      body: JSON.stringify({ error: 'Rota n\u00E3o encontrada' }),\n    };\n\n  } catch (error) {\n    console.error('\u274C Erro:', error);\n    console.error('Stack:', error.stack);\n    \n    return {\n      statusCode: 500,\n      headers,\n      body: JSON.stringify({ \n        error: 'Erro interno do servidor',\n        message: error.message,\n        details: process.env.NODE_ENV === 'development' ? error.stack : undefined\n      }),\n    };\n  }\n};\n"],
  "mappings": "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",
  "names": []
}
