{
  "version": 3,
  "sources": ["../../home/ernesto/Downloads/cbmpe-risk-analyzer-main/sgvp-cbmpe-v2/netlify/functions/analyses.js"],
  "sourceRoot": "/tmp/tmp-64113-Bm2BnUvJCjaG",
  "sourcesContent": ["// Netlify Function - API para DynamoDB\nimport { DynamoDBClient } from '@aws-sdk/client-dynamodb';\nimport { \n  DynamoDBDocumentClient, \n  PutCommand, \n  GetCommand, \n  ScanCommand, \n  DeleteCommand,\n  QueryCommand \n} from '@aws-sdk/lib-dynamodb';\n\n// Configurar cliente DynamoDB\nconsole.log('\uD83D\uDD27 Configurando DynamoDB...');\nconsole.log('Region:', process.env.MY_AWS_REGION || process.env.AWS_REGION || 'us-east-1');\nconsole.log('Access Key exists:', !!process.env.MY_AWS_ACCESS_KEY_ID || !!process.env.AWS_ACCESS_KEY_ID);\n\nconst client = new DynamoDBClient({\n  region: process.env.MY_AWS_REGION || process.env.AWS_REGION || 'us-east-1',\n  credentials: {\n    accessKeyId: process.env.MY_AWS_ACCESS_KEY_ID || process.env.AWS_ACCESS_KEY_ID,\n    secretAccessKey: process.env.MY_AWS_SECRET_ACCESS_KEY || process.env.AWS_SECRET_ACCESS_KEY,\n  },\n});\n\nconst docClient = DynamoDBDocumentClient.from(client);\n\n// Fun\u00E7\u00E3o para detectar a tabela baseado no path ou query param\nconst getTableFromPath = (path, queryParams) => {\n  // Priorizar query param 'table'\n  if (queryParams?.table) return queryParams.table;\n  \n  if (path.includes('/processes')) return 'processes';\n  if (path.includes('/history')) return 'process_history';\n  if (path.includes('/documents')) return 'process_documents';\n  if (path.includes('/profiles')) return 'profiles';\n  if (path.includes('/roles')) return 'user_roles';\n  return 'analyses'; // default\n};\n\n// Headers CORS\nconst headers = {\n  'Access-Control-Allow-Origin': '*',\n  'Access-Control-Allow-Headers': 'Content-Type',\n  'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n  'Content-Type': 'application/json',\n};\n\nexport const handler = async (event) => {\n  console.log('\uD83D\uDE80 NEW VERSION - Function called:', event.httpMethod, event.path);\n  console.log('\uD83D\uDE80 Query params:', JSON.stringify(event.queryStringParameters));\n  \n  // Handle CORS preflight\n  if (event.httpMethod === 'OPTIONS') {\n    return { statusCode: 200, headers, body: '' };\n  }\n\n  try {\n    console.log('\uD83D\uDD0D DEBUG: Entering try block');\n    const queryParams = event.queryStringParameters || {};\n    console.log('\uD83D\uDD0D DEBUG: Query params:', JSON.stringify(queryParams));\n    \n    // Detectar tabela baseado no path original ou query param\n    const TABLE_NAME = getTableFromPath(event.path, queryParams);\n    console.log('\uD83D\uDCCA Using table:', TABLE_NAME);\n    \n    // Limpar o path\n    let path = event.path\n      .replace('/.netlify/functions/analyses', '')\n      .replace('/.netlify/functions/processes', '')\n      .replace('/.netlify/functions/history', '')\n      .replace('/.netlify/functions/documents', '')\n      .replace('/.netlify/functions/profiles', '')\n      .replace('/.netlify/functions/roles', '')\n      .replace('/api/analyses', '')\n      .replace('/api/processes', '')\n      .replace('/api/history', '')\n      .replace('/api/documents', '')\n      .replace('/api/profiles', '')\n      .replace('/api/roles', '');\n    const method = event.httpMethod;\n\n    // GET - Listar todas ou buscar por ID/filtros\n    if (method === 'GET' && path === '') {\n      // Se tiver ID na query string, buscar por ID\n      if (queryParams.id) {\n        if (TABLE_NAME === 'profiles') {\n          console.log('\uD83D\uDC64 === BUSCANDO PERFIL POR ID ===');\n          console.log('User ID:', queryParams.id);\n        }\n        \n        const command = new GetCommand({\n          TableName: TABLE_NAME,\n          Key: { id: queryParams.id },\n        });\n        \n        const result = await docClient.send(command);\n        \n        if (!result.Item) {\n          if (TABLE_NAME === 'profiles') {\n            console.log('\uD83D\uDC64 Perfil n\u00E3o encontrado para ID:', queryParams.id);\n          }\n          return {\n            statusCode: 404,\n            headers,\n            body: JSON.stringify({ error: 'Item n\u00E3o encontrado' }),\n          };\n        }\n        \n        if (TABLE_NAME === 'profiles') {\n          console.log('\uD83D\uDC64 Perfil encontrado:', JSON.stringify(result.Item, null, 2));\n        }\n        \n        return {\n          statusCode: 200,\n          headers,\n          body: JSON.stringify(result.Item),\n        };\n      }\n      \n      // Scan com filtros opcionais\n      let scanParams = { TableName: TABLE_NAME };\n      \n      if (queryParams.user_id) {\n        scanParams.FilterExpression = 'user_id = :user_id';\n        scanParams.ExpressionAttributeValues = { ':user_id': queryParams.user_id };\n      } else if (queryParams.process_id) {\n        scanParams.FilterExpression = 'process_id = :process_id';\n        scanParams.ExpressionAttributeValues = { ':process_id': queryParams.process_id };\n      }\n      \n      const command = new ScanCommand(scanParams);\n      \n      const result = await docClient.send(command);\n      \n      return {\n        statusCode: 200,\n        headers,\n        body: JSON.stringify(result.Items || []),\n      };\n    }\n\n    // GET /api/analyses/stats - Estat\u00EDsticas\n    if (method === 'GET' && path === '/stats') {\n      const command = new ScanCommand({\n        TableName: TABLE_NAME,\n      });\n      \n      const result = await docClient.send(command);\n      const analyses = result.Items || [];\n      \n      const stats = {\n        total: analyses.length,\n        aprovados: analyses.filter(a => a.status === 'aprovado').length,\n        pendentes: analyses.filter(a => a.status === 'pendente').length,\n        reprovados: analyses.filter(a => a.status === 'reprovado').length,\n        porRisco: {\n          baixo: analyses.filter(a => a.analise?.riskLevel === 'low').length,\n          medio: analyses.filter(a => a.analise?.riskLevel === 'medium').length,\n          alto: analyses.filter(a => a.analise?.riskLevel === 'high').length,\n        },\n        porTipo: {\n          DDLCB: analyses.filter(a => a.certificado?.tipo === 'DDLCB').length,\n          AR: analyses.filter(a => a.certificado?.tipo === 'AR').length,\n          AVCB: analyses.filter(a => a.certificado?.tipo === 'AVCB').length,\n        },\n      };\n      \n      return {\n        statusCode: 200,\n        headers,\n        body: JSON.stringify(stats),\n      };\n    }\n\n    // GET /api/analyses/:id - Buscar por ID\n    if (method === 'GET' && path.startsWith('/')) {\n      const id = path.substring(1);\n      \n      const command = new GetCommand({\n        TableName: TABLE_NAME,\n        Key: { id },\n      });\n      \n      const result = await docClient.send(command);\n      \n      if (!result.Item) {\n        return {\n          statusCode: 404,\n          headers,\n          body: JSON.stringify({ error: 'An\u00E1lise n\u00E3o encontrada' }),\n        };\n      }\n      \n      return {\n        statusCode: 200,\n        headers,\n        body: JSON.stringify(result.Item),\n      };\n    }\n\n    // POST /api/analyses - Criar nova an\u00E1lise\n    if (method === 'POST') {\n      console.log('\uD83D\uDCBE Salvando item na tabela:', TABLE_NAME);\n      const data = JSON.parse(event.body);\n      \n      // Log espec\u00EDfico para cria\u00E7\u00E3o de perfil\n      if (TABLE_NAME === 'profiles') {\n        console.log('\uD83D\uDC64 === CRIANDO PERFIL DE USU\u00C1RIO ===');\n        console.log('Dados recebidos:', JSON.stringify(data, null, 2));\n      }\n      \n      // Gerar ID se n\u00E3o existir\n      if (!data.id) {\n        data.id = `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n      }\n      \n      // Adicionar timestamps baseado na tabela\n      if (TABLE_NAME === 'analyses') {\n        data.createdAt = new Date().toISOString();\n      } else {\n        if (!data.created_at) {\n          data.created_at = new Date().toISOString();\n        }\n        if (!data.updated_at && TABLE_NAME === 'processes') {\n          data.updated_at = new Date().toISOString();\n        }\n        if (!data.uploaded_at && TABLE_NAME === 'process_documents') {\n          data.uploaded_at = new Date().toISOString();\n          data.updated_at = new Date().toISOString();\n        }\n      }\n      \n      console.log('\uD83D\uDCDD Dados finais:', { id: data.id, table: TABLE_NAME });\n      \n      if (TABLE_NAME === 'profiles') {\n        console.log('\uD83D\uDC64 Dados do perfil a serem salvos:', JSON.stringify(data, null, 2));\n      }\n      \n      const command = new PutCommand({\n        TableName: TABLE_NAME,\n        Item: data,\n      });\n      \n      console.log('\uD83D\uDE80 Enviando para DynamoDB...');\n      await docClient.send(command);\n      console.log('\u2705 Salvo com sucesso!');\n      \n      if (TABLE_NAME === 'profiles') {\n        console.log('\uD83D\uDC64 === PERFIL CRIADO COM SUCESSO ===');\n      }\n      \n      return {\n        statusCode: 201,\n        headers,\n        body: JSON.stringify({ \n          id: data.id, \n          message: TABLE_NAME === 'profiles' ? 'Perfil criado com sucesso' : 'An\u00E1lise criada com sucesso' \n        }),\n      };\n    }\n\n    // PUT /api/analyses - Atualizar an\u00E1lise\n    if (method === 'PUT') {\n      console.log('\uD83D\uDD04 Atualizando item...');\n      const data = JSON.parse(event.body);\n      \n      if (!data.id) {\n        return {\n          statusCode: 400,\n          headers,\n          body: JSON.stringify({ error: 'ID \u00E9 obrigat\u00F3rio para atualiza\u00E7\u00E3o' }),\n        };\n      }\n      \n      // Buscar item existente primeiro\n      console.log('\uD83D\uDCD6 Buscando item existente...');\n      const getCommand = new GetCommand({\n        TableName: TABLE_NAME,\n        Key: { id: data.id },\n      });\n      \n      const existingItem = await docClient.send(getCommand);\n      \n      if (!existingItem.Item) {\n        return {\n          statusCode: 404,\n          headers,\n          body: JSON.stringify({ error: 'Item n\u00E3o encontrado' }),\n        };\n      }\n      \n      // Mesclar dados existentes com novos dados\n      const mergedData = {\n        ...existingItem.Item,\n        ...data,\n      };\n      \n      // Atualizar timestamp\n      if (TABLE_NAME === 'processes' || TABLE_NAME === 'process_documents') {\n        mergedData.updated_at = new Date().toISOString();\n      }\n      \n      console.log('\uD83D\uDCDD Atualizando:', { id: mergedData.id, table: TABLE_NAME });\n      \n      const command = new PutCommand({\n        TableName: TABLE_NAME,\n        Item: mergedData,\n      });\n      \n      console.log('\uD83D\uDE80 Enviando atualiza\u00E7\u00E3o para DynamoDB...');\n      await docClient.send(command);\n      console.log('\u2705 Atualizado com sucesso!');\n      \n      return {\n        statusCode: 200,\n        headers,\n        body: JSON.stringify({ \n          id: data.id, \n          message: 'Item atualizado com sucesso' \n        }),\n      };\n    }\n\n    // DELETE - Deletar item\n    if (method === 'DELETE') {\n      let itemId;\n      \n      // Tentar pegar ID da URL ou do body\n      if (path.startsWith('/') && path.length > 1) {\n        itemId = path.substring(1);\n      } else {\n        // Tentar pegar do body\n        const data = JSON.parse(event.body || '{}');\n        itemId = data.id;\n      }\n      \n      if (!itemId) {\n        return {\n          statusCode: 400,\n          headers,\n          body: JSON.stringify({ error: 'ID \u00E9 obrigat\u00F3rio para exclus\u00E3o' }),\n        };\n      }\n      \n      console.log('\uD83D\uDDD1\uFE0F Deletando item:', itemId, 'da tabela:', TABLE_NAME);\n      \n      const command = new DeleteCommand({\n        TableName: TABLE_NAME,\n        Key: { id: itemId },\n      });\n      \n      await docClient.send(command);\n      console.log('\u2705 Item deletado com sucesso!');\n      \n      return {\n        statusCode: 200,\n        headers,\n        body: JSON.stringify({ message: `${TABLE_NAME === 'process_documents' ? 'Documento' : 'Item'} deletado com sucesso` }),\n      };\n    }\n\n    // Rota n\u00E3o encontrada\n    return {\n      statusCode: 404,\n      headers,\n      body: JSON.stringify({ error: 'Rota n\u00E3o encontrada' }),\n    };\n\n  } catch (error) {\n    console.error('\u274C Erro:', error);\n    console.error('Stack:', error.stack);\n    \n    return {\n      statusCode: 500,\n      headers,\n      body: JSON.stringify({ \n        error: 'Erro interno do servidor',\n        message: error.message,\n        details: process.env.NODE_ENV === 'development' ? error.stack : undefined\n      }),\n    };\n  }\n};\n"],
  "mappings": "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",
  "names": ["command", "result"]
}
