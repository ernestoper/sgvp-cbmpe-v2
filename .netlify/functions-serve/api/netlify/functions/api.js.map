{
  "version": 3,
  "sources": ["../../../../../../SITES/bombeiro_pe/sgvp-cbmpe-v2/netlify/functions/api.js"],
  "sourceRoot": "C:/Users/brunn/AppData/Local/Temp/tmp-17428-w0wpwdWuWhAY",
  "sourcesContent": ["// Netlify Function - API Universal para DynamoDB\r\nimport { DynamoDBClient } from '@aws-sdk/client-dynamodb';\r\nimport { \r\n  DynamoDBDocumentClient, \r\n  PutCommand, \r\n  GetCommand, \r\n  ScanCommand, \r\n  DeleteCommand,\r\n  UpdateCommand \r\n} from '@aws-sdk/lib-dynamodb';\r\n\r\n// Configurar cliente DynamoDB\r\nconsole.log('\uD83D\uDD27 Configurando DynamoDB API Universal...');\r\n\r\nconst client = new DynamoDBClient({\r\n  region: process.env.MY_AWS_REGION || process.env.AWS_REGION || 'us-east-1',\r\n  credentials: {\r\n    accessKeyId: process.env.MY_AWS_ACCESS_KEY_ID || process.env.AWS_ACCESS_KEY_ID,\r\n    secretAccessKey: process.env.MY_AWS_SECRET_ACCESS_KEY || process.env.AWS_SECRET_ACCESS_KEY,\r\n  },\r\n});\r\n\r\nconst docClient = DynamoDBDocumentClient.from(client);\r\n\r\n// Headers CORS\r\nconst headers = {\r\n  'Access-Control-Allow-Origin': '*',\r\n  'Access-Control-Allow-Headers': 'Content-Type',\r\n  'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\r\n  'Content-Type': 'application/json',\r\n};\r\n\r\nexport const handler = async (event) => {\r\n  console.log('\uD83D\uDD25 API Function called:', event.httpMethod, event.path);\r\n  \r\n  if (event.httpMethod === 'OPTIONS') {\r\n    return { statusCode: 200, headers, body: '' };\r\n  }\r\n\r\n  try {\r\n    // Detectar qual tabela usar baseado no path\r\n    let tableName = 'processes'; // default\r\n    let path = event.path;\r\n    \r\n    if (path.includes('/analyses')) {\r\n      tableName = 'analyses';\r\n      path = path.replace('/.netlify/functions/api/analyses', '').replace('/api/analyses', '');\r\n    } else if (path.includes('/processes')) {\r\n      tableName = 'processes';\r\n      path = path.replace('/.netlify/functions/api/processes', '').replace('/api/processes', '');\r\n    } else if (path.includes('/history')) {\r\n      tableName = 'process_history';\r\n      path = path.replace('/.netlify/functions/api/history', '').replace('/api/history', '');\r\n    } else if (path.includes('/documents')) {\r\n      tableName = 'process_documents';\r\n      path = path.replace('/.netlify/functions/api/documents', '').replace('/api/documents', '');\r\n    } else if (path.includes('/profiles')) {\r\n      tableName = 'profiles';\r\n      path = path.replace('/.netlify/functions/api/profiles', '').replace('/api/profiles', '');\r\n    } else if (path.includes('/roles')) {\r\n      tableName = 'user_roles';\r\n      path = path.replace('/.netlify/functions/api/roles', '').replace('/api/roles', '');\r\n    }\r\n    \r\n    console.log('\uD83D\uDCCA Table:', tableName, 'Path:', path);\r\n    \r\n    const method = event.httpMethod;\r\n    const queryParams = event.queryStringParameters || {};\r\n\r\n    // GET - Listar todos ou buscar por ID/filtros\r\n    if (method === 'GET') {\r\n      // Se tiver ID na query string, buscar por ID\r\n      if (queryParams.id) {\r\n        const command = new GetCommand({\r\n          TableName: tableName,\r\n          Key: { id: queryParams.id },\r\n        });\r\n        \r\n        const result = await docClient.send(command);\r\n        \r\n        if (!result.Item) {\r\n          return {\r\n            statusCode: 404,\r\n            headers,\r\n            body: JSON.stringify({ error: 'Item n\u00E3o encontrado' }),\r\n          };\r\n        }\r\n        \r\n        return {\r\n          statusCode: 200,\r\n          headers,\r\n          body: JSON.stringify(result.Item),\r\n        };\r\n      }\r\n      \r\n      // Scan com filtros opcionais\r\n      let scanParams = { TableName: tableName };\r\n      \r\n      if (queryParams.user_id) {\r\n        scanParams.FilterExpression = 'user_id = :user_id';\r\n        scanParams.ExpressionAttributeValues = { ':user_id': queryParams.user_id };\r\n      } else if (queryParams.process_id) {\r\n        scanParams.FilterExpression = 'process_id = :process_id';\r\n        scanParams.ExpressionAttributeValues = { ':process_id': queryParams.process_id };\r\n      }\r\n      \r\n      const command = new ScanCommand(scanParams);\r\n      const result = await docClient.send(command);\r\n      \r\n      console.log('\u2705 Items encontrados:', result.Items?.length || 0);\r\n      \r\n      return {\r\n        statusCode: 200,\r\n        headers,\r\n        body: JSON.stringify(result.Items || []),\r\n      };\r\n    }\r\n\r\n    // POST - Criar novo item\r\n    if (method === 'POST') {\r\n      const data = JSON.parse(event.body);\r\n      \r\n      if (!data.id) {\r\n        data.id = `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\r\n      }\r\n      \r\n      if (!data.created_at) {\r\n        data.created_at = new Date().toISOString();\r\n      }\r\n      \r\n      if (!data.updated_at) {\r\n        data.updated_at = new Date().toISOString();\r\n      }\r\n      \r\n      const command = new PutCommand({\r\n        TableName: tableName,\r\n        Item: data,\r\n      });\r\n      \r\n      await docClient.send(command);\r\n      console.log('\u2705 Item criado:', data.id);\r\n      \r\n      return {\r\n        statusCode: 201,\r\n        headers,\r\n        body: JSON.stringify({ id: data.id }),\r\n      };\r\n    }\r\n\r\n    // PUT - Atualizar item\r\n    if (method === 'PUT') {\r\n      const data = JSON.parse(event.body);\r\n      const id = data.id;\r\n      \r\n      if (!id) {\r\n        return {\r\n          statusCode: 400,\r\n          headers,\r\n          body: JSON.stringify({ error: 'ID \u00E9 obrigat\u00F3rio' }),\r\n        };\r\n      }\r\n      \r\n      data.updated_at = new Date().toISOString();\r\n      \r\n      // Construir UpdateExpression dinamicamente\r\n      const updateExpressions = [];\r\n      const expressionAttributeNames = {};\r\n      const expressionAttributeValues = {};\r\n      \r\n      Object.keys(data).forEach((key, index) => {\r\n        if (key !== 'id') {\r\n          updateExpressions.push(`#attr${index} = :val${index}`);\r\n          expressionAttributeNames[`#attr${index}`] = key;\r\n          expressionAttributeValues[`:val${index}`] = data[key];\r\n        }\r\n      });\r\n      \r\n      const command = new UpdateCommand({\r\n        TableName: tableName,\r\n        Key: { id },\r\n        UpdateExpression: `SET ${updateExpressions.join(', ')}`,\r\n        ExpressionAttributeNames: expressionAttributeNames,\r\n        ExpressionAttributeValues: expressionAttributeValues,\r\n      });\r\n      \r\n      await docClient.send(command);\r\n      console.log('\u2705 Item atualizado:', id);\r\n      \r\n      return {\r\n        statusCode: 200,\r\n        headers,\r\n        body: JSON.stringify({ message: 'Item atualizado' }),\r\n      };\r\n    }\r\n\r\n    // DELETE - Deletar item\r\n    if (method === 'DELETE') {\r\n      const data = JSON.parse(event.body);\r\n      const id = data.id;\r\n      \r\n      if (!id) {\r\n        return {\r\n          statusCode: 400,\r\n          headers,\r\n          body: JSON.stringify({ error: 'ID \u00E9 obrigat\u00F3rio' }),\r\n        };\r\n      }\r\n      \r\n      const command = new DeleteCommand({\r\n        TableName: tableName,\r\n        Key: { id },\r\n      });\r\n      \r\n      await docClient.send(command);\r\n      console.log('\u2705 Item deletado:', id);\r\n      \r\n      return {\r\n        statusCode: 200,\r\n        headers,\r\n        body: JSON.stringify({ message: 'Item deletado' }),\r\n      };\r\n    }\r\n\r\n    return {\r\n      statusCode: 404,\r\n      headers,\r\n      body: JSON.stringify({ error: 'M\u00E9todo n\u00E3o suportado' }),\r\n    };\r\n\r\n  } catch (error) {\r\n    console.error('\u274C Erro:', error);\r\n    \r\n    return {\r\n      statusCode: 500,\r\n      headers,\r\n      body: JSON.stringify({ \r\n        error: 'Erro interno do servidor',\r\n        message: error.message \r\n      }),\r\n    };\r\n  }\r\n};\r\n"],
  "mappings": "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",
  "names": ["command", "result"]
}
